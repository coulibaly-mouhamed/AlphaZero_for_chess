'''
Implement the AlphaZero algorithm with PyTorch for the Chess game. 
'''
from random import sample
import torch
from torch import nn


'''
Create a convolutional block made of :
    -A convolution of 256 filters of kernel size 3x3 with stride 1 
    - batch normalization
    -A rectifier non linearity 
'''
import torch.nn.functional as F

class ConvBlock(nn.Module):
    def __init__(self):
        super(ConvBlock, self).__init__()
        self.action_size = 8*8*73
        self.conv1 = nn.Conv2d(21, 256, 3, stride=1, padding=1) #change 22 par 21
        self.bn1 = nn.BatchNorm2d(256)

    def forward(self, s):
        # Convert to tensor
        s = torch.tensor(s, dtype=torch.float32) 
        s = s.view(-1, 21,8,8)  # batch_size x channels x board_x x board_y
        s = F.relu(self.bn1(self.conv1(s)))
        return s


        


    
'''
Create a residual block made of :
    -A convolution of 2 filters of kernel size 1*1 with stride 1
    - batch normalization
    - A skip connection that adds the input to the block
    -A rectifier non linearity
'''
class ResBlock(nn.Module):
    def __init__(self, inplanes=256, planes=256, stride=1, downsample=None):
        super(ResBlock, self).__init__()
        self.conv1 = nn.Conv2d(inplanes, planes, kernel_size=3, stride=stride,
                     padding=1, bias=False)
        self.bn1 = nn.BatchNorm2d(planes)
        self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=stride,
                     padding=1, bias=False)
        self.bn2 = nn.BatchNorm2d(planes)

    def forward(self, x):
        residual = x
        out = self.conv1(x)
        out = F.relu(self.bn1(out))
        out = self.conv2(out)
        out = self.bn2(out)
        out += residual
        out = F.relu(out)
        return out
    



class OutBlock(nn.Module):
    def __init__(self):
        super(OutBlock, self).__init__()
        self.conv = nn.Conv2d(256, 1, kernel_size=1) # value head
        self.bn = nn.BatchNorm2d(1)
        self.fc1 = nn.Linear(8*8, 64)
        self.fc2 = nn.Linear(64, 1)
        
        self.conv1 = nn.Conv2d(256, 128, kernel_size=1) # policy head
        self.bn1 = nn.BatchNorm2d(128)
        self.logsoftmax = nn.LogSoftmax(dim=1)
        self.fc = nn.Linear(8*8*128, 8*8*73)
    
    def forward(self,s):
        v = F.relu(self.bn(self.conv(s))) # value head
        v = v.view(-1, 8*8)  # batch_size X channel X height X width
        v = F.relu(self.fc1(v))
        v = torch.tanh(self.fc2(v))
        
        p = F.relu(self.bn1(self.conv1(s))) # policy head
        p = p.view(-1, 8*8*128)
        p = self.fc(p)
        p = self.logsoftmax(p).exp()
        return p, v
        
class Alphazero_net(nn.Module):
    '''
    Implement the AlphaZero algorithm with PyTorch for the Chess game. It consists in a 
    Residual Network with 19 layers and 256 filters.
    '''
    def __init__(self):
        super(Alphazero_net, self).__init__()
        self.conv = ConvBlock()
        for block in range(19):
            self.add_module('resblock'+str(block),ResBlock())
        self.outblock = OutBlock()
        self.optimizer = torch.optim.SGD(self.parameters(), lr=0.01, momentum=0.9)
        self.lr_scheduler = torch.optim.lr_scheduler.StepLR(self.optimizer, step_size=400, gamma=0.1)
        
    def forward(self, x):
        s = self.conv(x)
        for block in range(19):
            s = self.__getattr__('resblock'+str(block))(s)
        p,v = self.outblock(s)
        return p,v
    
    def checkpoint(self,epoch):
        torch.save(self.state_dict(), 'checkpoint.pth.tar')
        print('Checkpoint saved !')
        
    def loss_function(self,p,v,pi,z):
        '''
        Compute the loss function of the AlphaZero algorithm which is the sum of the 
        cross entropy loss and the MSE loss.
        
        '''
        return -torch.sum(pi*torch.log(p)) + torch.sum((z-v)**2)
    
     
    def fit_to_self_play(self,data_batch,cpu=1):
        '''
        Training Pipeline of the AlphaZero algorithm which consists in :
            - From data generated by self play do
            - Predict the output of the neural network
            - Compute the loss function
            - Backpropagate the loss function
            - Update the weights of the neural network
        '''
        torch.manual_cpu(cpu)
        cuda = torch.cuda.is_available()
        
        self.optimizer.zero_grad()
        loss_batch = 0
        
        for state_board in data_batch:
            state, pi_board, v_board = state_board
            p_predicted, v_predicted = self.forward(state)
            loss_batch += self.loss_function(p_predicted, v_predicted, pi_board, v_board)

        loss_batch.backward()
        self.optimizer.step()
            
        return loss_batch
    
    
    def evaluator (self):
        pass
    
    def self_play(self):
        pass
    
    def sample(self,data,batch_size):
        pass
    
    
    def update_parameters(self,data,batch_size=500,epochs=50):  
        for i in range(epochs):
            data_batch = sample(data,batch_size)
            loss_batch = self.fit_to_self_play(data_batch)
    
    def self_play(self):
        pass
    
    def train(self,num_iterations=1000):
        '''
        Training Pipeline of the AlphaZero algorithm which consists in :
            - Generate data from self play games monitored by an MCTS
            - Update the parameters of the neural network
        '''
        '''
        for i in range(num_iterations):
            
            data = self.self_play()
            
            self.update_parameters(data)
            
            if i%50 == 0:
                self.checkpoint()
        '''
        


###############################################
